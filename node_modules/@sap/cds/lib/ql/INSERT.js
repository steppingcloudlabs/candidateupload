const Query = require('./cds.ql-Query')
class INSERT extends Query {

  /** @type import('./cqn').INSERT['INSERT'] */
  INSERT = {}

  static call = (..._) => (new this).entries(..._)
  static API = { class:this,
    into: (..._) => (new this).into(..._)
  }

  into (entity, ...data) {
    this._.into = this._target4 (entity, ...data) // supporting tts
    if (data.length) this.entries(...data)
    return this
  }

  entries (...x) {
    if (!x.length) return this
    if (x[0].SELECT) return this.from(x[0])
    this._.entries = is_array(x[0]) ? x[0] : x
    return this
  }
  columns (...x) {
    this._.columns = is_array(x[0]) ? x[0] : x
    return this
  }
  values (...x) {
    this._.values = is_array(x[0]) ? x[0] : x
    return this
  }
  rows (...rows) {
    if (is_array(rows[0]) && is_array(rows[0][0])) rows = rows[0]
    if (!is_array(rows[0])) this._expected `Arguments ${{rows}} to be an array of arrays`
    this._.rows = rows
    return this
  }

  from (query) {
    if (!query) return this
    if (!query.SELECT) {
      if (query.name || typeof query === 'string') query = SELECT.from(query)
      else this._expected `${{query}} to be a CQN {SELECT} query object`
    }
    this._.as = query // REVISIT: should we also change CSN spec, and adopt db service impls?
    return this
  }

  /** @deprecated */ as(q) { return this.from(q) }

  valueOf() {
    return super.valueOf('INSERT INTO')
  }

  get _target_ref(){ return ( this.INSERT || this.UPSERT ).into }
}

const is_array = Array.isArray

INSERT.prototype.as = require('../utils').deprecated (INSERT.prototype.as, {
  old:'INSERT.as(SELECT)',
  use:'INSERT.entries(SELECT)'
})

/** @type INSERT.API & (...entries:[]) => INSERT */
module.exports = INSERT.init()
